{"ast":null,"code":"var _jsxFileName = \"/Users/bagjuhong/Desktop/nomadcoding/src/routes/Home.js\",\n    _s = $RefreshSig$();\n\nimport { dbService, storageService } from \"fBase\";\nimport React, { useState, useEffect } from \"react\";\nimport { finished } from \"stream\";\nimport Nweet from '../components/Nweet';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = _ref => {\n  _s();\n\n  let {\n    userObj\n  } = _ref;\n  // \n  console.log(userObj);\n  const [text, setText] = useState(\"\");\n  const [nweets, setNweets] = useState([]);\n  const [attachment, setAttachment] = useState(\"\");\n  useEffect(() => {\n    // 실시간 리얼타임\n    // onSnapshot은 기본적으로 데이터베이스에 무슨일이 있을 때, 알림을 받을 것임. \n    // 호출이됌.\n    dbService.collection(\"nweets\").onSnapshot(snapshot => {\n      const nweetArray = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setNweets(nweetArray);\n    });\n  }, []);\n\n  const onSubmit = async event => {\n    // 페이지 렌더링 못하도록 막는 함수 \n    event.preventDefault();\n    const fileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`); // nweets이란 데이터베이스 컬렉션에 document를 추가하는 함수 \n    // await dbService.collection(\"nweets\").add({\n    //     // nweet: nweet\n    //     text,\n    //     createdAt: Date.now(),\n    //     // 로그인한사람이 누군지 알기위한 함수호출\n    //     creatorId: userObj.uid\n    // });\n\n    setText(\"\");\n  };\n\n  const onChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    setText(value);\n  };\n\n  const onFileChange = event => {\n    const {\n      target: {\n        files\n      }\n    } = event;\n    const theFile = files[0]; //fileReaderAPI \n\n    const reader = new FileReader(); // npm i stream함\n\n    reader.onloadend = finishedEvent => {\n      // 파일 로딩이 끝날시 호출되는 함수\n      const {\n        currentTarget: {\n          result\n        }\n      } = finishedEvent;\n      setAttachment(result);\n    };\n\n    reader.readAsDataURL(theFile);\n  };\n\n  const onClearAttachmentClick = () => {\n    setAttachment(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"What's on your mind?\",\n        maxLength: 120,\n        value: text,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: onFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Nweet\",\n        onClick: onSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), attachment && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: attachment,\n          width: \"100px\",\n          height: \"100px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClearAttachmentClick,\n          children: \"clear photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: nweets.map(nweet => {\n        return /*#__PURE__*/_jsxDEV(Nweet, {\n          nweetObj: nweet,\n          isOwner: nweet.creatorId === userObj.uid\n        }, nweet.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"WmiylNdM00mPm4Y3EEkqm75EBZc=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/bagjuhong/Desktop/nomadcoding/src/routes/Home.js"],"names":["dbService","storageService","React","useState","useEffect","finished","Nweet","v4","uuidv4","Home","userObj","console","log","text","setText","nweets","setNweets","attachment","setAttachment","collection","onSnapshot","snapshot","nweetArray","docs","map","doc","id","data","onSubmit","event","preventDefault","fileRef","ref","child","uid","onChange","target","value","onFileChange","files","theFile","reader","FileReader","onloadend","finishedEvent","currentTarget","result","readAsDataURL","onClearAttachmentClick","nweet","creatorId"],"mappings":"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","sourcesContent":["import { dbService, storageService } from \"fBase\";\nimport React, { useState, useEffect } from \"react\";\nimport { finished } from \"stream\";\nimport Nweet from '../components/Nweet';\nimport { v4 as uuidv4 } from 'uuid'; \n\nconst Home = ({ userObj }) => {\n    // \n    console.log(userObj);\n    const [text, setText] = useState(\"\");\n    const [nweets, setNweets] = useState([]);\n    const [attachment, setAttachment] = useState(\"\")\n\n    useEffect(() => {\n        // 실시간 리얼타임\n        // onSnapshot은 기본적으로 데이터베이스에 무슨일이 있을 때, 알림을 받을 것임. \n        // 호출이됌.\n        dbService.collection(\"nweets\").onSnapshot((snapshot) => {\n            const nweetArray = snapshot.docs.map((doc) => ({\n                id: doc.id,\n                ...doc.data()\n            }))\n            setNweets(nweetArray);\n        })\n    }, [])\n\n    const onSubmit = async (event) => {\n        // 페이지 렌더링 못하도록 막는 함수 \n        event.preventDefault();\n\n        const fileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\n\n        // nweets이란 데이터베이스 컬렉션에 document를 추가하는 함수 \n        // await dbService.collection(\"nweets\").add({\n        //     // nweet: nweet\n        //     text,\n        //     createdAt: Date.now(),\n        //     // 로그인한사람이 누군지 알기위한 함수호출\n        //     creatorId: userObj.uid\n        // });\n        setText(\"\")\n    };\n    const onChange = (event) => {\n        const { target: { value } } = event;\n        setText(value);\n    };\n    const onFileChange = (event) =>{\n        const { target: {files},} = event;\n        const theFile = files[0];\n        //fileReaderAPI \n        const reader = new FileReader();\n        // npm i stream함\n        reader.onloadend = (finishedEvent) => {\n            // 파일 로딩이 끝날시 호출되는 함수\n            const {currentTarget: { result }} = finishedEvent\n            setAttachment(result)\n        }\n        reader.readAsDataURL(theFile);\n    }\n    const onClearAttachmentClick = () => {\n        setAttachment(\"\");\n    }\n    return (\n        <div>\n            <form>\n                <input\n                    type=\"text\"\n                    placeholder=\"What's on your mind?\"\n                    maxLength={120}\n                    value={text}\n                    onChange={onChange}\n                />\n                 <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={onFileChange}\n                />\n                <input\n                    type=\"submit\"\n                    value=\"Nweet\"\n                    onClick={onSubmit}\n                />\n                {/* attachment가 있으면 img을 렌더링하는 코드 */}\n                {attachment && <div>\n                    <img src={attachment} width=\"100px\" height=\"100px\"></img>\n                    <button onClick={onClearAttachmentClick}>clear photo</button>\n                    </div>}\n            </form>\n            <div>\n                {nweets.map((nweet) => {\n                    return <Nweet\n                        key={nweet.id}\n                        nweetObj={nweet}\n                        isOwner={nweet.creatorId === userObj.uid} />\n                }\n                )}\n            </div>\n        </div>\n    )\n}\nexport default Home;"]},"metadata":{},"sourceType":"module"}