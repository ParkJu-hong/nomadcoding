[{"/Users/bagjuhong/Desktop/nomadcoding/src/index.js":"1","/Users/bagjuhong/Desktop/nomadcoding/src/components/App.js":"2","/Users/bagjuhong/Desktop/nomadcoding/src/routes/Auth.js":"3","/Users/bagjuhong/Desktop/nomadcoding/src/routes/Home.js":"4","/Users/bagjuhong/Desktop/nomadcoding/src/components/AppRouter.js":"5","/Users/bagjuhong/Desktop/nomadcoding/src/fBase.js":"6","/Users/bagjuhong/Desktop/nomadcoding/src/components/Navigation.js":"7","/Users/bagjuhong/Desktop/nomadcoding/src/routes/Profile.js":"8","/Users/bagjuhong/Desktop/nomadcoding/src/components/Nweet.js":"9"},{"size":209,"mtime":1642255326507,"results":"10","hashOfConfig":"11"},{"size":927,"mtime":1642513536567,"results":"12","hashOfConfig":"11"},{"size":2797,"mtime":1642299351209,"results":"13","hashOfConfig":"11"},{"size":3495,"mtime":1642515132299,"results":"14","hashOfConfig":"11"},{"size":808,"mtime":1642508144796,"results":"15","hashOfConfig":"11"},{"size":698,"mtime":1642514733740,"results":"16","hashOfConfig":"11"},{"size":249,"mtime":1642299749519,"results":"17","hashOfConfig":"11"},{"size":396,"mtime":1642300648197,"results":"18","hashOfConfig":"11"},{"size":2499,"mtime":1642514618237,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"qxh8an",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/bagjuhong/Desktop/nomadcoding/src/index.js",[],["40","41"],"/Users/bagjuhong/Desktop/nomadcoding/src/components/App.js",[],"/Users/bagjuhong/Desktop/nomadcoding/src/routes/Auth.js",[],"/Users/bagjuhong/Desktop/nomadcoding/src/routes/Home.js",["42","43"],"import { dbService, storageService } from \"fBase\";\nimport React, { useState, useEffect } from \"react\";\nimport { finished } from \"stream\";\nimport Nweet from '../components/Nweet';\nimport { v4 as uuidv4 } from 'uuid'; \n\nconst Home = ({ userObj }) => {\n    // \n    console.log(userObj);\n    const [text, setText] = useState(\"\");\n    const [nweets, setNweets] = useState([]);\n    const [attachment, setAttachment] = useState(\"\")\n\n    useEffect(() => {\n        // 실시간 리얼타임\n        // onSnapshot은 기본적으로 데이터베이스에 무슨일이 있을 때, 알림을 받을 것임. \n        // 호출이됌.\n        dbService.collection(\"nweets\").onSnapshot((snapshot) => {\n            const nweetArray = snapshot.docs.map((doc) => ({\n                id: doc.id,\n                ...doc.data()\n            }))\n            setNweets(nweetArray);\n        })\n    }, [])\n\n    const onSubmit = async (event) => {\n        // 페이지 렌더링 못하도록 막는 함수 \n        event.preventDefault();\n\n        const fileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\n        const response = await fileRef.putString(attachment, \"data_url\");\n        console.log(response);\n        // nweets이란 데이터베이스 컬렉션에 document를 추가하는 함수 \n        // await dbService.collection(\"nweets\").add({\n        //     // nweet: nweet\n        //     text,\n        //     createdAt: Date.now(),\n        //     // 로그인한사람이 누군지 알기위한 함수호출\n        //     creatorId: userObj.uid\n        // });\n        setText(\"\")\n    };\n    const onChange = (event) => {\n        const { target: { value } } = event;\n        setText(value);\n    };\n    const onFileChange = (event) =>{\n        const { target: {files},} = event;\n        const theFile = files[0];\n        //fileReaderAPI \n        const reader = new FileReader();\n        // npm i stream함\n        reader.onloadend = (finishedEvent) => {\n            // 파일 로딩이 끝날시 호출되는 함수\n            const {currentTarget: { result }} = finishedEvent\n            setAttachment(result)\n        }\n        reader.readAsDataURL(theFile);\n    }\n    const onClearAttachmentClick = () => {\n        setAttachment(\"\");\n    }\n    return (\n        <div>\n            <form>\n                <input\n                    type=\"text\"\n                    placeholder=\"What's on your mind?\"\n                    maxLength={120}\n                    value={text}\n                    onChange={onChange}\n                />\n                 <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={onFileChange}\n                />\n                <input\n                    type=\"submit\"\n                    value=\"Nweet\"\n                    onClick={onSubmit}\n                />\n                {/* attachment가 있으면 img을 렌더링하는 코드 */}\n                {attachment && <div>\n                    <img src={attachment} width=\"100px\" height=\"100px\"></img>\n                    <button onClick={onClearAttachmentClick}>clear photo</button>\n                    </div>}\n            </form>\n            <div>\n                {nweets.map((nweet) => {\n                    return <Nweet\n                        key={nweet.id}\n                        nweetObj={nweet}\n                        isOwner={nweet.creatorId === userObj.uid} />\n                }\n                )}\n            </div>\n        </div>\n    )\n}\nexport default Home;","/Users/bagjuhong/Desktop/nomadcoding/src/components/AppRouter.js",[],"/Users/bagjuhong/Desktop/nomadcoding/src/fBase.js",[],"/Users/bagjuhong/Desktop/nomadcoding/src/components/Navigation.js",[],"/Users/bagjuhong/Desktop/nomadcoding/src/routes/Profile.js",[],"/Users/bagjuhong/Desktop/nomadcoding/src/components/Nweet.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":3,"column":10,"nodeType":"50","messageId":"51","endLine":3,"endColumn":18},{"ruleId":"52","severity":1,"message":"53","line":86,"column":21,"nodeType":"54","endLine":86,"endColumn":72},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'finished' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]